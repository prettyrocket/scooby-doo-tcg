package com.techelevator.dao;

import com.techelevator.model.ProductionRun;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;

@Component
public class JdbcProductionRunDao implements ProductionRunDao {
    private final String TABLE = "production_run";
    private final JdbcTemplate jdbcTemplate;

    public JdbcProductionRunDao(JdbcTemplate jdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
    }

    /**
     * @return All recorded production runs.
     */
    @Override
    public List<ProductionRun> readAll() {
        List<ProductionRun> productionRuns = new ArrayList<>();
        String sql = "select * from " + TABLE;

        SqlRowSet results = jdbcTemplate.queryForRowSet(sql);
        while (results.next()) {
            ProductionRun productionRun = mapRowToModel(results);
            productionRuns.add(productionRun);
        }

        return productionRuns;
    }

    /**
     * @param productionRunId Serialized id generated by the database
     * @return The production run with the given id.
     */
    @Override
    public ProductionRun read(int productionRunId) {
        String sql = "select * from " + TABLE + " where id = ?";
        SqlRowSet results = jdbcTemplate.queryForRowSet(sql, productionRunId);
        if (results.next()) {
            return mapRowToModel(results);
        } else {
            return null;
        }
    }

    /**
     * @param productCode The product id
     * @return All production runs for the given product code.
     */
    @Override
    public List<ProductionRun> readForProduct(int productCode) {
        List<ProductionRun> productionRuns = new ArrayList<>();
        String sql = "select * from " + TABLE + " where product_code = ?";
        SqlRowSet results = jdbcTemplate.queryForRowSet(sql, productCode);
        while (results.next()) {
            productionRuns.add(mapRowToModel(results));
        }

        return productionRuns;
    }

    @Override
    public boolean create(ProductionRun run) {
        String sql = "insert into " + TABLE + " (product_code, production_date, quantity, status, notes) values (?,?,?,?,?)";
        return jdbcTemplate.update(sql, run.getProductCode(), run.getProductionDate(), run.getVolume(), run.getStatus(), run.getNotes()) == 1;
    }

    @Override
    public boolean update(ProductionRun run) {
        String sql = "update " + TABLE + " set production_date = ?, quantity = ?, status = ?, notes = ? WHERE id = ?";
        return false;
    }


    ProductionRun mapRowToModel(SqlRowSet results) {
        ProductionRun productionRun = new ProductionRun();
        productionRun.setRunCode(results.getInt("id"));
        productionRun.setProductCode(results.getInt("product_code"));
        productionRun.setProductionDate(results.getDate("production_date"));
        productionRun.setVolume(results.getInt("quantity"));
        productionRun.setStatus(results.getString("status"));
        productionRun.setNotes(results.getString("notes"));
        return productionRun;
    }
}
